#Localization file for russian language
tab.results.chart=График
tab.data.label=ДАННЫЕ
tab.architecture=Архитектура

tab.management=Управление
tab.results=Результаты
menu.about=О ПРИЛОЖЕНИИ
tab.data.trainDataset=Обучающая выборка
general.confirm=Подтвердить
tab.data.testDataset=Тестовая выборка
tab.architecture.input.parameter=Параметр

tab.architecture.input.targetParameter=Целевой параметр
tab.architecture.layers.label=Архитектура нейронной сети
tab.architecture.layers.layerNumber=№ слоя
general.numberSign=№
tab.architecture.layers.neuronCount=Количество нейронов
tab.architecture.layers.type=Тип
tab.architecture.visualisation=Визуализация
tab.management.hyperparameters.label=Настройка гиперпараметров
tab.management.hyperparameters.name=Название
tab.management.hyperparameters.value=Значение
tab.management.hyperparameters.description=Описание
tab.management.label=УПРАВЛЕНИЕ
tab.management.load.loadArchitecture=Загрузить архитектуру
tab.management.load.loadWeights=Загрузить веса
tab.management.load.loadHyperparameters=Загрузить гиперпараметры
tab.management.load.loadNetwork=Загрузить нейронную сеть
tab.management.save.saveArchitecture=Сохранить архитектуру
tab.management.save.saveHyperparameters=Сохранить гиперпараметры
tab.management.save.saveWeights=Сохранить веса
tab.management.save.saveNetwork=Save the neural network
tab.management.saveStatistics=Сохранять статистику каждую
tab.management.epoch=\ эпоху.
tab.management.openResults=Автоматически открыть результаты
tab.management.startNetwork=Запустить нейронную сеть
tab.results.simulator=Симулятор
tab.results.simulator.parameter=Параметр
tab.results.simulator.value=Значение
tab.results.simulator.calculate=Рассчитать
tab.results.simulator.result=Результат:
tab.results.chart.meanErrorChart=График средней ошибки
tab.results.openInNewWindow=В новом окне
tab.results.matrix.errorMatrix=Матрица ошибок
tab.results.statistics=Статистика
tab.results.statistics.class=Класс
tab.results.statistics.metric=Метрика
general.training=Обучение
general.testing=Тестирование
menu.about.developer=Разработчик
menu.about.application=Описание
menu.about.feedback=Обратная связь
menu.about.feedback.form=Форма обратной связи
menu.about.feedback.email=E-mail: ravikgames1111@gmail.com
menu.about.feedback.vk=VK разработчика
menu.about.developer.name=Алексей Близниченко 
menu.about.github=GitHub страница проекта
menu.about.developer.mentor=Наставник:
menu.about.developer.mentor.name=Глеч Екатерина Викторовна
menu.about.developer.support=При поддержке:
menu.about.developer.support.name=ГБОУ ЦДО "Малая Академия Наук" города Севастополя
menu.about.application.info=ANNA (Advanced Neural Network Application) – это open-source приложение для создания, настройки и использования нейронных сетей прямого распространения. Приложение имеет модульную структуру и позволяет пользователю детально настроить архитектуру и гиперпараметры нейронной сети. Приложение находится в разработке и может содержать ошибки. Просьба сообщать о найденных неисправностях в форму ниже.
menu.about.application.guide=Краткое руководство пользования:\n\
1. Загрузить обучающую выборку данных во вкладке «Данные»\n\
2. Настроить входные нейроны и проверочный столбец (вкладка «Архитектура»)\n\
3. Настроить структуру нейронной сети\n\
4. Настроить гиперпараметры (вкладка «Управление»; необязательно)\n\
5. «Запустить нейронную сеть»
tab.management.hyperparameters.name.numberOfEpochs=Количество эпох
tab.management.hyperparameters.name.batchSize=Размер входных данных в эпохе
tab.management.hyperparameters.name.biasNeurons=[WIP] Использовать нейроны смещения
tab.management.hyperparameters.name.weightInit=Тип инициализации весов нейросети
tab.management.hyperparameters.name.learningRate=Скорость обучения
tab.management.hyperparameters.name.momentum=Момент
tab.management.hyperparameters.name.slopeInFunctions=Наклон в функциях активации
tab.management.hyperparameters.description.numberOfEpochs=Сколько раз должна нейронная сеть обучиться на входном файле.\n\
Напрямую влияет на длительность и точность обучения.\n\
Слишком большие значения могут привести и переобучению, а слишком маленькие к недостаточному обучению.
tab.management.hyperparameters.description.batchSize=Размер подаваемых нейронной сети данных в строках.\n\
0 --считывать весь файл.
tab.management.hyperparameters.description.biasNeurons=Добавить к структуре нейронной сети нейроны смещения (смещение).\n\
Смещение добавляют к каждому слою (исключая входной) нейрон со значением 1. Это помогает сдвигать функцию активации по оси X и потенциально увеличить захватываемую область значений.
tab.management.hyperparameters.description.weightInit=Способ вычисления первых весов в нейронной сети.\n\
RANDOM (По умолчанию) -- псевдослучайным образом от 0 до 1;\n\
ALL_ONES -- все значения 1;\n\
ALL_HALVES -- все значения 0.5
tab.management.hyperparameters.description.learningRate=Параметр при вычислении градиентного спуска.\n\
Прямо пропорционально влияет на значение градиентного спуска при обучении нейронной сети.
tab.management.hyperparameters.description.momentum="Ускорение" при использовании градиентного спуска.\n\
Слишком большие значения могут "перескочить" глобальный минимум/максимум, а слишком маленькие "застрянут" в локальных минимумах/максимумах.
tab.management.hyperparameters.description.slopeInFunctions=Определяет градиент отрицательных значений в функции активации LeakyReLU и ELU.
tab.results.matrix.errorMatrix.realValues=Реальные значения
tab.results.matrix.errorMatrix.predictedValues=Предсказанные значения
tab.results.matrix.errorMatrix.positive=Положительные
tab.results.matrix.errorMatrix.negative=Отрицательные
tab.results.matrix.errorMatrix.realClasses=Реальные классы
tab.results.matrix.errorMatrix.predictedClasses=Предсказанные классы
tab.results.allClasses=Все классы
tab.results.statistics.metric.dataSize=Размер данных
tab.results.statistics.metric.error=Ошибка последней эпохи
tab.results.statistics.metric.hits=Верно определено
tab.results.statistics.metric.accuracy=Точность (Accuracy)
tab.results.statistics.metric.precision=Точность (Precision)
tab.results.statistics.metric.recall=Полнота (Recall)
tab.results.statistics.metric.fScore=F-мера
tab.results.matrix=Матрица
tab.results.inNewWindow=Открыто в другом окне
tab.architecture.selectDatabase=Выберите базу данных
tab.architecture.trainingDatabase=Обучающая база данных
tab.architecture.testingDatabase=Тестовая база данных
logger.error=Ошибка
logger.warning=Предупреждение
logger.warning.failedToGetTrainingDataFile=Произошла ошибка при считывании тренировочной базы данных. Файл не найден.
logger.warning.failedToReadTrainingDataFile=Произошла ошибка при считывании тренировочной базы данных. Не удалось прочитать файл.
logger.warning.failedToGetTestingDataFile=Произошла ошибка при считывании тестовой базы данных. Файл не найден.
logger.warning.failedToReadTestingDataFile=Произошла ошибка при считывании тестовой базы данных. Не удалось прочитать файл.
logger.warning.fileNotValid=Выбранный файл не действителен.
general.selectData=Выберите данные
logger.warning.wrongValue=Произошла ошибка при считывании значения. Ошибочное значение будет заменено нулем.
logger.warning.failedToReadDatabase=Произошла ошибка при считывании базы данных.
logger.warning.wrongUserInput=Произошла ошибка при считывании пользовательских полей. Некорректные данные будут заменены нулями.
general.inputValue=Введите значение
logger.error.trainingInputNeuronsNotConfigured=Не настроены входные нейроны для обучающих данных.
logger.error.structureNotConfigured=Не настроена структура нейронной сети.
logger.error.testingInputNeuronsNotConfigured=Не настроены входные нейроны для тестовых данных. Для тестирования будут использованы обучающие данные.
logger.error.structureMisconfigured=Структура нейронной сети не совпадает для обучающих и тестовых данных. Количество входных нейронов различается.
logger.error.dataMismatch=Произошла ошибка при считывании датасета. Выбранные данные обучающей и тестовой выборки не совпадают.
logger.warning.noTrainingDatabase=Отсутствует обучающая база данных.
logger.warning.noTestDatabase=Отсутствует тестовая база данных.
logger.error.structureInitialization=Произошла ошибка при инициализации структуры нейронной сети. Отсутствует информация о строении сети.
logger.error.simulatorError=Произошла ошибка при запуске симулятора. Отсутствуют необходимые значения.
logger.error.unexpectedNetworkError=Произошла непредвиденная ошибка при запуске или работе нейронной сети.
logger.error.fileLoadingError=Произошла ошибка при загрузке дополнительных файлов.
tab.results.simulator.classificationCategory=Класс:t
tab.results.simulator.networkOutput=\nЗначения нейронной сети:\n
tab.results.simulator.predictionValue=Прогнозируемое значение:\n
tab.results.matrix.errorMatrix.classLimitFull=Превышен лимит классов для отображения (
tab.results.matrix.errorMatrix.classLimitSmall=Превышен лимит классов для отображения (6), откройте матрицу в новом окне для просмотра
tab.results.chart.meanError=Средняя ошибка
tab.results.chart.accuracy=Точность (Accuracy)
tab.results.chart.accuracyChart=График средней точности
tab.results.chart.meanFScore=Средняя F-мера
tab.results.chart.meanFScoreChart=График средней F-меры
tab.results.matrix.small=Бинарная матрица ошибок
tab.results.matrix.full=Полная матрица ошибок
tab.results.chart.epoch=Эпоха
menu.welcome=Добро пожаловать!
menu.buttons.createNewNetwork=Создать новую нейросеть
menu.buttons.loadNetwork=Загрузить нейросеть
menu.buttons.tutorial=Обучение
menu.buttons.settings=Настройки
menu.buttons.exit=Выход
menu.lastChangelog=Последние изменения
menu.language=Язык:
menu.tutorial=ОБУЧЕНИЕ
menu.tutorial.video=Видеоролики
menu.tutorial.interactiveTutorial=Интерактивное обучение
menu.tutorial.interactiveTutorial.forBeginners=Для начинающих пользователей
menu.tutorial.interactiveTutorial.time=Меньше 10 минут
menu.tutorial.interactiveTutorial.uiExploration=Изучение интерфейса приложения
menu.tutorial.interactiveTutorial.actionExplanation=Объяснение каждого действия
menu.settings=НАСТРОЙКИ
menu.settings.network=Нейронная сеть
menu.settings.other=Другие
menu.newNetwork.advancedMode=Продвинутый режим
menu.newNetwork.advancedMode.users=Для опытных пользователей
menu.newNetwork.advancedMode.interface=Сложный интерфейс
menu.newNetwork.advancedMode.configuration=Детальная настройка нейросети
menu.newNetwork.advancedMode.limits=Нет ограничений
menu.newNetwork.simpleMode=Простой режим
menu.newNetwork.simpleMode.users=Для начинающих пользователей
menu.newNetwork.simpleMode.interface=Упрощенный интерфейс
menu.newNetwork.simpleMode.network=Автоматическое создание нейросети
menu.newNetwork.simpleMode.limits=Ограниченные настройки
menu.newNetwork=НОВАЯ НЕЙРОСЕТЬ
menu.buttons.about=О приложении
menu.language.russian=Русский
menu.language.english=English
logger.warning.dataReadError=Произошла ошибка при считывании файла настроек программы. Настройки будут сброшены.
logger.warning.dataWriteError=Произошла ошибка при сохранении данных программы. Не удалось сохранить настройки.
tab.architecture.networkTask=Задача нейронной сети
tab.architecture.networkTask.classification=Классификация
tab.architecture.networkTask.prediction=Прогнозирование
logger.warning.noDatabase=Отсутствует база данных.
tab.management.hyperparameters.name.errorFunction=Функция расчета ошибки
tab.management.hyperparameters.description.errorFunction=Метод, при помощи которого вычисляется отклонение полученного значения от целевого.\n\
MSE -- среднеквадратичная ошибка (Mean Squared Error)\n\
RMSE -- корень из среднеквадратичной ошибки (Root Mean Squared Error)\n\
Arctan -- арктангенс
logger.warning.datasetDifferentLabels=Произошла ошибка при чтении базы данных. Метки обучающего и тестового наборов данных не совпадают.
tab.data.autoSplit=Автоматически разделить на выборки
tab.data.preview=Предпросмотр
tab.data.dataset=Набор данных
general.load=Загрузить
general.save=Сохранить
tab.architecture.input.autoInputLayer=Автоматически настроить входной слой
tab.architecture.control=Управление
general.dataType=Тип
general.dataType.categorical=Категориальный
tab.architecture.label=АРХИТЕКТУРА
tab.data=Данные
tab.architecture.layers.activationFunction=Функция активации
tab.architecture.layers.type.input=Входной
tab.architecture.layers.type.output=Выходной
tab.management.saveLoadNetwork=Сохранить / Загрузить нейросеть
tab.results.label=РЕЗУЛЬТАТЫ
tab.results.matrix.data=Набор данных для матриц
tab.results.statistics.rating=Общая оценка
menu.language.warning=Для того, чтобы применить настройки языка, необходимо перезапустить приложение.\n\
In order to apply the language settings, you must restart the application.
tab.data.hints.autoSplit=Доля разделения общего набора данных на обучающую и тестовую выборки. Напрямую влияет на ход обучения и результат.\n\
Так, 80/20 означает, что 80% от общего датасета будут помещены в обучающую и 20% в тестовую выборку случайным образом.\n\
Рекомендованы значения от 60/40 до 90/10.
tab.data.hints.dataSet=Данные, которые используются программой для обучения нейросети.\n\
Рекомендуется предобработать загружаемый датасет к следующему виду:\n\
1. Формат .csv\n\
2. Первая строка содержит в себе названия параметров\n\
3. Параметры располагаются следующим образом: П1, П2, П3... Целевой параметр\n\
4. Целевой параметр (то, что предсказывает или классифицирует нейросеть) всегда последний
tab.architecture.hints.networkTask=В приложении поддерживается решение 2-х основных задач: классификации и прогнозирования.\n\
При классификации целевой параметр категориальный, а нейронная сеть обучается определять класс на основе поданных параметров.\n\
При прогнозировании целевой параметр числовой, нейронная сеть обучается предсказывать число на основе поданных параметров. Этот режим еще находится в разработке.
tab.architecture.hints.autoInputParameter=Автоматическая настройка предполагает, что набор данных соответствует описанным во вкладке "Данные".\n\
Последний параметр будет учитываться как целевой, все остальные как входные. Рекомендуется проверить, что автоматически определенный тип данных соответствует действительному.\n\
На данный момент поддерживаются следующие типы данных:\n\
1. Числовой (любое действительное число)\n\
2. Категориальный (несколько определенных категорий или классов; к нему относится и логический формат данных).
tab.architecture.hints.networkStructure=Описание структуры и организации нейронной сети.\n\
Количество слоев и количество нейронов в них варьируются для каждой поставленной задачи.\n\
Для некоторых простых задач может быть эффективна однослойная структура или структура без скрытых слоев.\n\
Для более сложных задач может быть эффективна смена функции активации и увеличение размеров структуры.
tab.architecture.hints.layerType=В программе представлены следующие типы слоев нейросети:\n\
1. Входной (Input) -- Содержит в себе входные параметры, нужен для передачи данных в следующие слои (количество нейронов: количество входных парметров исключая целевой);\n\
2. Скрытый (Hidden) -- Основня часть нейронной сети, выполняющая вычисления. Суммирует полученные "сигналы", умноженные на веса, затем сумма преобразуется функцией активации (количество нейронов: настраиваемое);\n\
3. Выходной (Output) -- Необходим для вычисления результата работы нейросети. Аналогичен скрытому слою. (количество нейронов: количество классов в целевом параметре или 1 для прогнозирования).\n
tab.architecture.hints.activationFunction=Метод преобразования результатов вычисления нейрона. Область значений функции:\n\
1. ReLU -- [0;+∞)\n\
2. LeakyReLU -- (-∞;+∞)\n\
3. Sigmoid -- (0;1)\n\
4. Tanh -- (-1;1)\n\
5. ExponentialLU -- (-1;+∞)\n\
6. Linear -- (-∞;+∞)
tab.management.hints.networkSaveLoad=Эта часть еще находится в разработке.\n\
Для сохранения нейронной сети необходимо ее обучить.
tab.management.hints.networkStart=Нейронная сеть готова к запуску обучения. Ошибок не обнаружено.
tab.management.hints.hyperparameters=Гиперпараметры -- некоторые значения (константы), котоыре используются и напрямую влияют на обучение и работу нейронной сети.\n\
Для достижения наилучшей эффективности без изменения структуры сети, рекомендуется подобрать подходящие значения вручную. Для каждой задачи они будут различны.
tab.results.hints.binaryMatrix=Визуализация оценки качества классификатора для конкретного класса.\n\
По главной диагонали расположены верно определенные классы, по побочной -- ошибочно определенные.\n\
TP -- истинно положительные классификации (класс верно определен)\n\
TN -- истинно отрицательне классификации\n\
FP -- ложно положительне классификации (класс неверно определен)\n\
FN -- ложно отрицательные классификации
tab.results.hints.fullMatrix=Визуализация оценки качества классификатора для всех классов. В случае бинарной классификации, полная матрица аналогична бинарной.\n\
По главной диагонали расположены верно определенные классы, все остальные определенны ошибочно.
tab.results.hints.statistics=Таблица, отображающая точные значения метрик нейронной сети.
tab.results.hints.rating=Примерная общая оценка работы нейронной сети, основанная на средних метриках (ошибка, точность, F-мера).\n\
Внимание! Это является субъективной метрикой автора и может не всегда отражать действительность, ее следуюет использовать только в ознакомительных целях.
tab.results.hints.simulator=Симулятор позволяет подать на вход обученной нейронной сети пользовательские значения и получить ответ (класс или прогноз).
tab.results.hints.simulatorResult=Полученное значение представляет из себя результат работы обученной нейронной сети при подаче на входной слой выбранных данных.\n\
Может использоваться как в ознакомительных так и в практических целях.
general.inDevelopment=В разработке...
general.returnToMenu=Возврат в меню
menu.lastChangelog.log=\
\

menu.lastChangelog.log.15-12-2023=15.12.2023 Новый интерфейс, новая платформа -- ELENNA!\n\n\
Было принято решение переформатировать приложение ANNA в образовательную платформу ELENNA (Educational Learning Engine for Neural Network Apllication).\n\
В рамках первого обновления был переработан весь интерфейс полностью, разделив редактор нейросети с главным меню. Многие части еще находятся в разработке (например, обучение и простой режим).\n\
Также была добавлена возможность детальнее настраивать структуру: менять функции активации, метод инициализации весов, метод расчета ошибки и т.д. Теперь можно загрузить один файл с данными, и он автоматически будет разделен на выборки, улучшена автонастройка входного слоя и многое другое.\n\
Более подробные изменения структуры проекта и GitHub описаны у меня в блоге в ВК.\n\n\
Добавлено:\n\
-- Новый интерфейс (главное меню, переработан редактор, добавлены подсказки);\n\
-- Выбор функции активации;\n\
-- Гиперпараметры: метод расчета ошибки, метод инициализации весов;\n\
-- «Общая оценка» работы нейросети;\n\
-- Автоматическое разделение на выборки и определение входного слоя;\n\
-- Перевод на английский;\n\
И многое другое.\



