#Localization file for english language
tab.data.label=DATA
tab.architecture=Architecture
tab.management=Management
tab.results=Results
menu.about=ABOUT
tab.data.trainDataset=Train sample
general.confirm=Confirm
tab.data.testDataset=Test sample
tab.architecture.input.parameter=Parameter
tab.architecture.input.targetParameter=Target parameter
tab.architecture.layers.label=Neural network architecture
tab.architecture.layers.layerNumber=Layer #
general.numberSign=#
tab.architecture.layers.neuronCount=Number of neurons
tab.architecture.layers.type=Type
tab.architecture.visualisation=Visualization
tab.management.hyperparameters.label=Hyperparameter settings
tab.management.hyperparameters.name=Name
tab.management.hyperparameters.value=Value
tab.management.hyperparameters.description=Description
tab.management.label=MANAGEMENT
tab.management.load.loadArchitecture=Load architecture
tab.management.load.loadWeights=Load weights
tab.management.load.loadHyperparameters=Load hyperparameters
tab.management.load.loadNetwork=Load the neural network
tab.management.save.saveArchitecture=Save architecture
tab.management.save.saveHyperparameters=Save hyperparameters
tab.management.save.saveWeights=Save weights
tab.management.save.saveNetwork=Save the neural network
tab.management.saveStatistics=Save statistics every
tab.management.epoch=\ epoch.
tab.management.openResults=Automatically open results
tab.management.startNetwork=Start the neural network
tab.results.simulator=Simulator
tab.results.simulator.parameter=Parameter
tab.results.simulator.value=Value
tab.results.simulator.calculate=Calculate
tab.results.simulator.result=Result:
tab.results.chart.meanErrorChart=Mean error plot
tab.results.openInNewWindow=Open in new window
tab.results.matrix.errorMatrix=Error matrix
tab.results.statistics=Statistics
tab.results.statistics.class=Class
tab.results.statistics.metric=Metric
general.training=Training
general.testing=Testing
menu.about.developer=Developer
menu.about.application=Description
menu.about.feedback=Feedback
menu.about.feedback.form=Application feedback form
menu.about.feedback.email=E-mail: ravikgames1111@gmail.com
menu.about.feedback.vk=Developer's VK
menu.about.developer.name=Aleksey Bliznichenko
menu.about.github=Project page on GitHub
menu.about.developer.mentor=Mentor:
menu.about.developer.mentor.name=Ekaterina Viktorovna Glech
menu.about.developer.support=Supported by:
menu.about.developer.support.name=SBEI CAE "Junior Academy of Sciences"
menu.about.application.info=ANNA (Advanced Neural Network Application) is an open-source application for creating, customizing and using feed-forward neural networks. The application has a modular structure and allows the user to customize the architecture and hyperparameters of a neural network in detail. The application is under development and may contain bugs. Please report bugs in the form below.
menu.about.application.guide=Quick Start Guide:\n\
1. Load the training data sample in the "Data" tab\n\
2. Configure input neurons and test column (tab "Architecture")\n\
3. Configure the neural network structure\n\
4. Customize hyperparameters ("Management" tab; optional)\n\
5. "Start the neural network"
tab.management.hyperparameters.name.numberOfEpochs=Number of epochs
tab.management.hyperparameters.name.batchSize=Batch size
tab.management.hyperparameters.name.biasNeurons=[WIP] Use bias neurons
tab.management.hyperparameters.name.weightInit=Network weight initialization type
tab.management.hyperparameters.name.learningRate=Learning rate
tab.management.hyperparameters.name.momentum=Momentum
tab.management.hyperparameters.name.slopeInFunctions=Slope in activation functions
tab.management.hyperparameters.description.numberOfEpochs=How many times the neural network must train on the input file.\n\
Directly affects the duration and accuracy of training.\n\
Too large values can lead to overtraining, and too small values can lead to undertraining.
tab.management.hyperparameters.description.batchSize=The size of the data input to the neural network in lines.\n\
0 - read the whole file.
tab.management.hyperparameters.description.biasNeurons=Add bias (offset) neurons to the neural network structure.\n\
Offset adds a neuron with a value of 1 to each layer (excluding the input layer). This helps to shift the activation function along the X-axis and potentially increase the captured area of values.
tab.management.hyperparameters.description.weightInit=A method for calculating the first weights in a neural network.\n\
RANDOM (Default) -- pseudo-randomly from 0 to 1;\n\
ALL_ONES -- all values are 1;\n\
ALL_HALVES -- all values 0.5
tab.management.hyperparameters.description.learningRate=Parameter when calculating gradient descent.\n\
Directly proportional to the value of gradient descent when training the neural network.
tab.management.hyperparameters.description.momentum="Acceleration" when using gradient descent.\n\
Too large values may "overshoot" the global minimum/maximum, and too small values will be "stuck" in local minimums/maximums.
tab.management.hyperparameters.description.slopeInFunctions=Defines the gradient of negative values in the LeakyReLU and ELU activation function.
tab.results.matrix.errorMatrix.realValues=Real values
tab.results.matrix.errorMatrix.predictedValues=Predicted values
tab.results.matrix.errorMatrix.positive=Positive
tab.results.matrix.errorMatrix.negative=Negative
tab.results.matrix.errorMatrix.realClasses=Real classes
tab.results.matrix.errorMatrix.predictedClasses=Predicted classes
tab.results.allClasses=All classes
tab.results.statistics.metric.dataSize=Data size
tab.results.statistics.metric.error=Error of the last epoch
tab.results.statistics.metric.hits=Correctly determined
tab.results.statistics.metric.accuracy=Accuracy
tab.results.statistics.metric.precision=Precision
tab.results.statistics.metric.recall=Recall
tab.results.statistics.metric.fScore=F-score
tab.results.matrix=Matrix
tab.results.chart=Plot
tab.results.inNewWindow=Opened in another window
tab.architecture.selectDatabase=Select a database
tab.architecture.trainingDatabase=Training database
tab.architecture.testingDatabase=Testing database
logger.error=Error
logger.warning=Warning
logger.warning.failedToGetTrainingDataFile=An error occurred while reading the training database. The file was not found.
logger.warning.failedToGetTestingDataFile=An error occurred while reading the testing database. The file was not found.
logger.warning.failedToReadTestingDataFile=An error occurred while reading the testing database. Failed to read file.
logger.warning.failedToReadTrainingDataFile=An error occurred while reading the training database. Failed to read file.
logger.warning.fileNotValid=Selected file is not valid
general.selectData=Select data
logger.warning.wrongValue=An error has occurred while reading the value. The wrong value will be replaced by zero.
logger.warning.failedToReadDatabase=An error occurred while reading the database.
logger.warning.wrongUserInput=An error occurred while reading user fields. Incorrect data will be replaced with zeros.
general.inputValue=Enter a value
logger.error.trainingInputNeuronsNotConfigured=Input neurons for training data are not configured.
logger.error.structureNotConfigured=The structure of the neural network is not set up.
logger.error.testingInputNeuronsNotConfigured=The input neurons for the test data are not configured. The training data will be used for testing.
logger.error.structureMisconfigured=The structure of the neural network is not the same for training and test data. The number of input neurons is different.
logger.error.dataMismatch=An error occurred when reading the dataset. The selected data of the training and test samples do not match.
logger.warning.noTestDatabase=There is no test database.
logger.warning.noTrainingDatabase=There is no training database.
logger.error.structureInitialization=An error occurred during initialization of the neural network structure. There is no information about the network structure.
logger.error.simulatorError=An error occurred when starting the simulator. The required values are missing.
logger.error.unexpectedNetworkError=Unexpected network error, aborting
logger.error.fileLoadingError=Couldn't load .fxml files
tab.results.simulator.classificationCategory=Class:\t
tab.results.simulator.networkOutput=\nNeural network values:\n
tab.results.simulator.predictionValue=Predicted value:\n
tab.results.matrix.errorMatrix.classLimitFull=Class limit for display has been exceeded (
tab.results.matrix.errorMatrix.classLimitSmall=Class limit exceeded for display (6), open the matrix in a new window to view it
tab.results.chart.meanError=Mean error
tab.results.chart.accuracy=Accuracy
tab.results.chart.accuracyChart=Mean accuracy plot
tab.results.chart.meanFScore=Mean F-score
tab.results.chart.meanFScoreChart=Mean F-score plot
tab.results.matrix.small=Binary confusion matrix
tab.results.matrix.full=Full confusion matrix
tab.results.chart.epoch=Epoch
menu.welcome=Welcome!
menu.buttons.createNewNetwork=Create a new neural network
menu.buttons.loadNetwork=Load the neural network
menu.buttons.tutorial=Tutorial
menu.buttons.settings=Settings
menu.buttons.exit=Quit
menu.lastChangelog=Last changes
menu.language=Language:
menu.tutorial=TUTORIAL
menu.tutorial.video=Videos
menu.tutorial.interactiveTutorial=Interactive tutorial
menu.tutorial.interactiveTutorial.forBeginners=For beginners
menu.tutorial.interactiveTutorial.time=Less than 10 minutes
menu.tutorial.interactiveTutorial.uiExploration=Exploring the application interface
menu.tutorial.interactiveTutorial.actionExplanation=Explanation of every action
menu.settings=SETTINGS
menu.settings.network=Neural network
menu.settings.other=Other
menu.newNetwork.advancedMode=Advanced mode
menu.newNetwork.advancedMode.users=For advanced users
menu.newNetwork.advancedMode.interface=Complex interface
menu.newNetwork.advancedMode.configuration=Detailed neural network setup
menu.newNetwork.advancedMode.limits=No limits
menu.newNetwork.simpleMode=Simple mode
menu.newNetwork.simpleMode.users=For beginners
menu.newNetwork.simpleMode.interface=Simplified interface
menu.newNetwork.simpleMode.network=Automatic creation of a neural network
menu.newNetwork.simpleMode.limits=Limited settings
menu.newNetwork=NEW NEURAL NETWORK
menu.buttons.about=About
menu.language.russian=Русский
menu.language.english=English
logger.warning.dataReadError=An error occurred while reading the program settings file. The settings will be reset.
logger.warning.dataWriteError=An error occurred while saving program data. Failed to save settings.
tab.architecture.networkTask=Neural network task
tab.architecture.networkTask.classification=Classification
tab.architecture.networkTask.prediction=Prediction
logger.warning.noDatabase=There is no database loaded.
tab.management.hyperparameters.name.errorFunction=Error calculation function
tab.management.hyperparameters.description.errorFunction=The method by which the deviation of the obtained value from the target value is calculated.\n\
MSE -- Mean Squared Error\n\
RMSE -- Root Mean Squared Error\n\
Arctan -- Arctangent
logger.warning.datasetDifferentLabels=An error occurred while reading the database. The labels of the training and test datasets do not match.
tab.data.autoSplit=Automatically split into samples
tab.data.preview=Preview
tab.data.dataset=Data set
general.load=Load
general.save=Save
tab.architecture.input.autoInputLayer=Automatically configure input layer
tab.architecture.control=Control
general.dataType=Type
tab.architecture.input.type=Type
general.dataType.categorical=Categorical
tab.architecture.label=ARCHITECTURE
tab.data=Data
tab.architecture.layers.activationFunction=Activation function
tab.architecture.layers.type.input=Input
tab.architecture.layers.type.output=Output
tab.management.saveLoadNetwork=Save / Load neural network
tab.results.label=RESULTS
tab.results.matrix.data=Matrix data set
tab.results.statistics.rating=Overall rating
menu.language.warning=Для того, чтобы применить настройки языка, необходимо перезапустить приложение.\n\
In order to apply the language settings, you must restart the application.
tab.data.hints.autoSplit=The share of dividing the total data set into training and testing samples. Directly affects the course of learning and the result.\n\
So, 80/20 means that 80% of the total dataset will be randomly placed in the training set and 20% in the test set.\n\
Recommended values are from 60/40 to 90/10.
tab.data.hints.dataSet=Data used by the program to train the neural network.\n\
It is recommended to preprocess the loaded dataset to the following form:\n\
1. .csv format\n\
2. The first line contains the names of the parameters\n\
3. The parameters are arranged as follows: P1, P2, P3... Target parameter\n\
4. The target parameter (what the neural network predicts or classifies) is always the last one
tab.architecture.hints.networkTask=The application supports the solution of 2 main tasks: classification and prediction.\n\
In classification, the target parameter is categorical, and the neural network is trained to determine the class based on the given parameters.\n\
When predicting the target parameter is numeric, the neural network is trained to predict the number based on the given parameters. This mode is still under development.
tab.architecture.hints.autoInputParameter=Automatic setup assumes that the data set matches those described in the "Data" tab.\n\
The last parameter will be taken into account as the target, all others as input. It is recommended to check that the automatically determined data type matches the actual one.\n\
The following data types are currently supported:\n\
1. Numeric (any real number)\n\
2. Categorical (several specific categories or classes; this also includes the logical data type).
tab.architecture.hints.networkStructure=Description of the structure and organization of the neural network.\n\
The number of layers and the number of neurons in them vary for each task.\n\
For some simple tasks, a single-layer structure or a structure without hidden layers may be effective.\n\
For more complex tasks, changing the activation function and increasing the size of the structure can be effective.
tab.architecture.hints.layerType=The program presents the following types of neural network layers:\n\
1. Input - Contains input parameters, needed to transfer data to the next layers (number of neurons: number of input parameters excluding the target one);\n\
2. Hidden - The main part of the neural network that performs calculations. Sums the received "signals" multiplied by the weights, then the sum is transformed by the activation function (number of neurons: configurable);\n\
3. Output -- Necessary for calculating the result of the neural network. Similar to hidden layer. (number of neurons: number of classes in the target parameter or 1 for prediction).\n
tab.architecture.hints.activationFunction=Method for converting neuron calculation results. Function range:\n\
1. ReLU -- [0;+∞)\n\
2. LeakyReLU -- (-∞;+∞)\n\
3. Sigmoid -- (0;1)\n\
4. Tanh -- (-1;1)\n\
5. ExponentialLU -- (-1;+∞)\n\
6. Linear -- (-∞;+∞)
tab.management.hints.networkSaveLoad=This part is still under development.\n\
To save a neural network, it needs to be trained.
tab.management.hints.networkStart=The neural network is ready to start training. No errors found.
tab.management.hints.hyperparameters=Hyperparameters are some values (constants) that are used and directly affect the training and operation of the neural network.\n\
To achieve the best efficiency without changing the network structure, it is recommended to select the appropriate values manually. They will be different for each task.
tab.results.hints.binaryMatrix=Visualization of classifier quality assessment for a specific class.\n\
Correctly defined classes are located along the main diagonal, and incorrectly defined classes are located along the secondary diagonal.\n\
TP -- true positive classifications (class is correctly defined)\n\
TN -- true negative classification\n\
FP -- false positive classification (class is incorrectly defined)\n\
FN -- false negative classifications
tab.results.hints.fullMatrix=Visualization of classifier quality assessment for all classes. In the case of binary classification, the full matrix is similar to the binary one.\n\
Along the main diagonal are correctly defined classes, all others are defined incorrectly.
tab.results.hints.statistics=A table displaying the exact values of neural network metrics.
tab.results.hints.rating=An approximate overall assessment of the performance of a neural network based on average metrics (error, accuracy, F-measure).\n\
Attention! This is a subjective metric of the author and may not always reflect reality; it should be used for informational purposes only.
tab.results.hints.simulator=The simulator allows you to input custom values to a trained neural network and get a response (class or prediction).
tab.results.hints.simulatorResult=The resulting value is the result of the work of the trained neural network when the selected data is fed to the input layer.\n\
Can be used for informational and practical purposes.
general.inDevelopment=In development...
general.returnToMenu=Return to menu


